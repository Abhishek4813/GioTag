{"version":3,"sources":["map.js","redux/ActionCreator.js","redux/ActionType.js","redux/ping.js","navbar.js","sidebar.js","logbar.js","App.js","redux/configureStore.js","serviceWorker.js","index.js"],"names":["curr_location","map","loc","latlng","lat","lng","this","props","add_pointer","setTimeout","className","markers","pings","zoom","onClick","click","location","Component","withRouter","connect","state","dispatch","coord","type","payload","new_location","action","length","title","pop","draggable","temp","position","onDragend","e","target","_latlng","concat","window","alert","undefined","navbar","name","fetch","then","response","json","data","setState","src","width","sidebar","mark_location","markLocation","logbar","store","createStore","combineReducers","applyMiddleware","logger","App","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.90acf21f.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport Map from \"mapmyindia-react\";\r\nimport{add_pointer} from './redux/ActionCreator';\r\nimport {withRouter} from 'react-router';\r\nimport {connect} from 'react-redux';\r\nimport './map.css';\r\n\r\nexport var curr_location=[];\r\nconst mapStateToProps=state=>{\r\n    return {\r\n    pings:state.pings,\r\n}}\r\n\r\nconst mapDispatchToPorps=(dispatch)=>({\r\n    add_pointer:(coord)=>dispatch(add_pointer(coord))\r\n})\r\n\r\nclass map extends Component{\r\n   click(loc){\r\n       curr_location=[loc.latlng.lat,loc.latlng.lng];\r\n        this.props.add_pointer(loc.latlng);\r\n        setTimeout(()=>{\r\n            this.props.add_pointer(loc.latlng);\r\n        },0);\r\n    }\r\n    render(){\r\n        return(\r\n            <Map className=\"map\"\r\n                markers={this.props.pings}\r\n                zoom={1} \r\n                onClick={(loc)=>this.click(loc)}\r\n                location={true}\r\n             />\r\n               \r\n        )\r\n    }\r\n}\r\nexport default withRouter(connect(mapStateToProps,mapDispatchToPorps)(map));","import * as ActionType from './ActionType';\r\n\r\nexport const add_pointer=(coord)=>{\r\n    return{\r\n        type:ActionType.Add_Pointer,\r\n        payload:[coord.lat,coord.lng]\r\n    }\r\n};\r\nexport const mark_location=(coord)=>{\r\n    return {\r\n        type:ActionType.Mark_Location,\r\n        payload:[coord[0],coord[1]]\r\n    }\r\n};","export const Add_Pointer=\"Add_Pointer\";\r\nexport const Mark_Location=\"Mark_Location\";\r\n","import * as ActionType from './ActionType';\r\nimport {curr_location} from '../map';\r\nexport var new_location=[];\r\nexport const pings=(state=[],action)=>{\r\n    switch(action.type){\r\n        case ActionType.Add_Pointer:\r\n            if(state.length>=1 && state[state.length-1].title && state[state.length-1].title===\"New Tag\"){\r\n                state.pop();\r\n            }\r\n            if(state.length>=2 && state[state.length-2].draggable){\r\n                return state;\r\n            }\r\n            new_location=curr_location;\r\n            var temp={\r\n                position:action.payload,\r\n                draggable:true,\r\n                onDragend:e=>{\r\n                    new_location=[e.target._latlng.lat,e.target._latlng.lng];\r\n                }\r\n            }\r\n            state=state.concat(temp);\r\n            return state;\r\n        case ActionType.Mark_Location:\r\n            if(state.length===0){\r\n                window.alert(\"Add a location to ping....\");\r\n                return state;\r\n            }\r\n            if(state[state.length-1].position[0]===undefined){\r\n                window.alert(\"Add a location to ping....\");\r\n                return state;\r\n            }\r\n            if(state.length>=1){\r\n                while (state.length>=1 && state[state.length-1].draggable){\r\n                state.pop()\r\n                }\r\n            }\r\n            var temp={\r\n                position:action.payload,\r\n                title:\"New Tag\",\r\n                draggable:false,\r\n            }\r\n            state=state.concat(temp);\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport './navbar.css';\r\n\r\nclass navbar extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            name:''\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        fetch('/users/username')\r\n        .then((response)=>response.json())\r\n        .then((data)=>{\r\n            this.setState({\r\n                name:data.name,\r\n            })\r\n        })\r\n    }\r\n    render(){\r\n        return(\r\n            <nav>\r\n<div>\r\n<img src=\"/logoimg.png\" width={\"60px\"}/>\r\n    <div className=\"logo\">\r\n    GioTag \r\n    </div>\r\n    </div>\r\n    <div className=\"user\">\r\n    <span className=\"material-icons\">account_circle</span> \r\n     <span className=\"user-text\">{this.state.name}</span>\r\n    </div>\r\n</nav>\r\n        )\r\n    }\r\n}\r\nexport default navbar;","import React,{Component} from 'react';\r\nimport \"./sidebar.css\";\r\nimport {mark_location} from \"./redux/ActionCreator\";\r\nimport {new_location} from \"./redux/ping\";\r\nimport {withRouter} from 'react-router';\r\nimport {connect} from 'react-redux';\r\n\r\nconst mapDispatchToProps=(dispatch)=>({\r\n    mark_location:(coord)=>dispatch(mark_location(coord))\r\n})\r\n\r\nclass sidebar extends Component{\r\n    markLocation(coord){\r\n        this.props.mark_location(coord);\r\n        setTimeout(()=>{\r\n            this.props.mark_location([]);\r\n        },0);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"sidebar-container\">\r\n                <img src=\"/decorator.png\" width={\"75%\"} className=\"decorator\"/>\r\n            <ul className=\"map-links\">\r\n               <li> MY Pings</li>\r\n                <li>All Pings</li>\r\n                <li>Unping</li>\r\n                <li>Logout</li>\r\n                <li className=\"ping_button\" onClick={()=>this.markLocation(new_location)}>Ping</li>\r\n            </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default withRouter(connect(null,mapDispatchToProps)(sidebar));","import React,{Component} from 'react';\r\nimport \"./logbar.css\";\r\n\r\nclass logbar extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"sidebar-container side-bar-right\">\r\n                <div className=\"ping-log-info\">Ping Logs</div>\r\n            <ul className=\"log-bar\">\r\n               <li> MY Pings</li>\r\n                <li>All Pings</li>\r\n                <li>Unping</li>\r\n                <li>Logout</li>\r\n                <li> MY Pings</li>\r\n                <li>All Pings</li>\r\n                <li>Unping</li>\r\n                <li>Logout</li>\r\n                <li> MY Pings</li>\r\n                <li>All Pings</li>\r\n                <li>Unping</li>\r\n                <li>Logout</li>\r\n                <li> MY Pings</li>\r\n                <li>All Pings</li>\r\n                <li>Unping</li>\r\n                <li>Logout</li>\r\n            </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default logbar;","import React,{Component} from 'react';\nimport {Provider} from 'react-redux';\nimport {configureStore} from './redux/configureStore';\nimport './App.css';\nimport Map from\"./map\";\nimport Navbar from './navbar';\nimport Sidebar from './sidebar';\nimport Logbar from './logbar';\n\nconst store= configureStore();\nclass App extends Component{\n  render(){\n  return (\n    <Provider store={store} className=\"App\">\n    <Navbar/>\n    <div className=\"map-box\">\n    <Sidebar/>\n    <Map/>\n    <Logbar/>\n    </div>\n    </Provider>\n  );\n}\n}\nexport default App;\n","import {createStore,combineReducers,applyMiddleware} from \"redux\";\r\nimport {pings} from \"./ping\";\r\nimport logger from 'redux-logger';\r\n\r\nexport const configureStore=()=>{\r\nconst store=createStore(\r\n    combineReducers({\r\n        pings:pings,\r\n    }),\r\n    applyMiddleware(logger));\r\n    return store;\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}